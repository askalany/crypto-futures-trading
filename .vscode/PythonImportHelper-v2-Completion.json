[
    {
        "label": "consts",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "consts",
        "description": "consts",
        "detail": "consts",
        "documentation": {}
    },
    {
        "label": "BASE_URL",
        "importPath": "consts",
        "description": "consts",
        "isExtraImport": true,
        "detail": "consts",
        "documentation": {}
    },
    {
        "label": "KEY",
        "importPath": "consts",
        "description": "consts",
        "isExtraImport": true,
        "detail": "consts",
        "documentation": {}
    },
    {
        "label": "SECRET",
        "importPath": "consts",
        "description": "consts",
        "isExtraImport": true,
        "detail": "consts",
        "documentation": {}
    },
    {
        "label": "TIF",
        "importPath": "enums",
        "description": "enums",
        "isExtraImport": true,
        "detail": "enums",
        "documentation": {}
    },
    {
        "label": "OrderType",
        "importPath": "enums",
        "description": "enums",
        "isExtraImport": true,
        "detail": "enums",
        "documentation": {}
    },
    {
        "label": "PositionSide",
        "importPath": "enums",
        "description": "enums",
        "isExtraImport": true,
        "detail": "enums",
        "documentation": {}
    },
    {
        "label": "PriceMatchNone",
        "importPath": "enums",
        "description": "enums",
        "isExtraImport": true,
        "detail": "enums",
        "documentation": {}
    },
    {
        "label": "PriceMatchQueue",
        "importPath": "enums",
        "description": "enums",
        "isExtraImport": true,
        "detail": "enums",
        "documentation": {}
    },
    {
        "label": "Side",
        "importPath": "enums",
        "description": "enums",
        "isExtraImport": true,
        "detail": "enums",
        "documentation": {}
    },
    {
        "label": "TickerSymbol",
        "importPath": "enums",
        "description": "enums",
        "isExtraImport": true,
        "detail": "enums",
        "documentation": {}
    },
    {
        "label": "OrderType",
        "importPath": "enums",
        "description": "enums",
        "isExtraImport": true,
        "detail": "enums",
        "documentation": {}
    },
    {
        "label": "PositionSide",
        "importPath": "enums",
        "description": "enums",
        "isExtraImport": true,
        "detail": "enums",
        "documentation": {}
    },
    {
        "label": "PriceMatch",
        "importPath": "enums",
        "description": "enums",
        "isExtraImport": true,
        "detail": "enums",
        "documentation": {}
    },
    {
        "label": "PriceMatchNone",
        "importPath": "enums",
        "description": "enums",
        "isExtraImport": true,
        "detail": "enums",
        "documentation": {}
    },
    {
        "label": "Side",
        "importPath": "enums",
        "description": "enums",
        "isExtraImport": true,
        "detail": "enums",
        "documentation": {}
    },
    {
        "label": "TickerSymbol",
        "importPath": "enums",
        "description": "enums",
        "isExtraImport": true,
        "detail": "enums",
        "documentation": {}
    },
    {
        "label": "TIF",
        "importPath": "enums",
        "description": "enums",
        "isExtraImport": true,
        "detail": "enums",
        "documentation": {}
    },
    {
        "label": "PositionSide",
        "importPath": "enums",
        "description": "enums",
        "isExtraImport": true,
        "detail": "enums",
        "documentation": {}
    },
    {
        "label": "Strategy",
        "importPath": "enums",
        "description": "enums",
        "isExtraImport": true,
        "detail": "enums",
        "documentation": {}
    },
    {
        "label": "TickerSymbol",
        "importPath": "enums",
        "description": "enums",
        "isExtraImport": true,
        "detail": "enums",
        "documentation": {}
    },
    {
        "label": "TIF",
        "importPath": "enums",
        "description": "enums",
        "isExtraImport": true,
        "detail": "enums",
        "documentation": {}
    },
    {
        "label": "OrderType",
        "importPath": "enums",
        "description": "enums",
        "isExtraImport": true,
        "detail": "enums",
        "documentation": {}
    },
    {
        "label": "PositionSide",
        "importPath": "enums",
        "description": "enums",
        "isExtraImport": true,
        "detail": "enums",
        "documentation": {}
    },
    {
        "label": "PriceMatch",
        "importPath": "enums",
        "description": "enums",
        "isExtraImport": true,
        "detail": "enums",
        "documentation": {}
    },
    {
        "label": "PriceMatchNone",
        "importPath": "enums",
        "description": "enums",
        "isExtraImport": true,
        "detail": "enums",
        "documentation": {}
    },
    {
        "label": "Side",
        "importPath": "enums",
        "description": "enums",
        "isExtraImport": true,
        "detail": "enums",
        "documentation": {}
    },
    {
        "label": "TickerSymbol",
        "importPath": "enums",
        "description": "enums",
        "isExtraImport": true,
        "detail": "enums",
        "documentation": {}
    },
    {
        "label": "TIF",
        "importPath": "enums",
        "description": "enums",
        "isExtraImport": true,
        "detail": "enums",
        "documentation": {}
    },
    {
        "label": "TIF",
        "importPath": "enums",
        "description": "enums",
        "isExtraImport": true,
        "detail": "enums",
        "documentation": {}
    },
    {
        "label": "AmountSpacing",
        "importPath": "enums",
        "description": "enums",
        "isExtraImport": true,
        "detail": "enums",
        "documentation": {}
    },
    {
        "label": "PositionSide",
        "importPath": "enums",
        "description": "enums",
        "isExtraImport": true,
        "detail": "enums",
        "documentation": {}
    },
    {
        "label": "PriceMatchQueue",
        "importPath": "enums",
        "description": "enums",
        "isExtraImport": true,
        "detail": "enums",
        "documentation": {}
    },
    {
        "label": "Side",
        "importPath": "enums",
        "description": "enums",
        "isExtraImport": true,
        "detail": "enums",
        "documentation": {}
    },
    {
        "label": "TickerSymbol",
        "importPath": "enums",
        "description": "enums",
        "isExtraImport": true,
        "detail": "enums",
        "documentation": {}
    },
    {
        "label": "TIF",
        "importPath": "enums",
        "description": "enums",
        "isExtraImport": true,
        "detail": "enums",
        "documentation": {}
    },
    {
        "label": "PositionSide",
        "importPath": "enums",
        "description": "enums",
        "isExtraImport": true,
        "detail": "enums",
        "documentation": {}
    },
    {
        "label": "Strategy",
        "importPath": "enums",
        "description": "enums",
        "isExtraImport": true,
        "detail": "enums",
        "documentation": {}
    },
    {
        "label": "TickerSymbol",
        "importPath": "enums",
        "description": "enums",
        "isExtraImport": true,
        "detail": "enums",
        "documentation": {}
    },
    {
        "label": "TIF",
        "importPath": "enums",
        "description": "enums",
        "isExtraImport": true,
        "detail": "enums",
        "documentation": {}
    },
    {
        "label": "AmountSpacing",
        "importPath": "enums",
        "description": "enums",
        "isExtraImport": true,
        "detail": "enums",
        "documentation": {}
    },
    {
        "label": "OrderType",
        "importPath": "enums",
        "description": "enums",
        "isExtraImport": true,
        "detail": "enums",
        "documentation": {}
    },
    {
        "label": "PositionSide",
        "importPath": "enums",
        "description": "enums",
        "isExtraImport": true,
        "detail": "enums",
        "documentation": {}
    },
    {
        "label": "PriceMatch",
        "importPath": "enums",
        "description": "enums",
        "isExtraImport": true,
        "detail": "enums",
        "documentation": {}
    },
    {
        "label": "PriceMatchNone",
        "importPath": "enums",
        "description": "enums",
        "isExtraImport": true,
        "detail": "enums",
        "documentation": {}
    },
    {
        "label": "PriceMatchQueue",
        "importPath": "enums",
        "description": "enums",
        "isExtraImport": true,
        "detail": "enums",
        "documentation": {}
    },
    {
        "label": "Side",
        "importPath": "enums",
        "description": "enums",
        "isExtraImport": true,
        "detail": "enums",
        "documentation": {}
    },
    {
        "label": "TickerSymbol",
        "importPath": "enums",
        "description": "enums",
        "isExtraImport": true,
        "detail": "enums",
        "documentation": {}
    },
    {
        "label": "create_order",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "get_scaled_amounts",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "batched_lists",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "print_date_and_time",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "create_multiple_orders",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "create_order",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "get_orders_quantities_and_prices",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "auto",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "concurrent.futures",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "concurrent.futures",
        "description": "concurrent.futures",
        "detail": "concurrent.futures",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "typer",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "typer",
        "description": "typer",
        "detail": "typer",
        "documentation": {}
    },
    {
        "label": "config_logging",
        "importPath": "binance.lib.utils",
        "description": "binance.lib.utils",
        "isExtraImport": true,
        "detail": "binance.lib.utils",
        "documentation": {}
    },
    {
        "label": "UMFuturesWebsocketClient",
        "importPath": "binance.websocket.um_futures.websocket_client",
        "description": "binance.websocket.um_futures.websocket_client",
        "isExtraImport": true,
        "detail": "binance.websocket.um_futures.websocket_client",
        "documentation": {}
    },
    {
        "label": "print",
        "importPath": "rich",
        "description": "rich",
        "isExtraImport": true,
        "detail": "rich",
        "documentation": {}
    },
    {
        "label": "print",
        "importPath": "rich",
        "description": "rich",
        "isExtraImport": true,
        "detail": "rich",
        "documentation": {}
    },
    {
        "label": "print",
        "importPath": "rich",
        "description": "rich",
        "isExtraImport": true,
        "detail": "rich",
        "documentation": {}
    },
    {
        "label": "print",
        "importPath": "rich",
        "description": "rich",
        "isExtraImport": true,
        "detail": "rich",
        "documentation": {}
    },
    {
        "label": "print",
        "importPath": "rich",
        "description": "rich",
        "isExtraImport": true,
        "detail": "rich",
        "documentation": {}
    },
    {
        "label": "print",
        "importPath": "rich",
        "description": "rich",
        "isExtraImport": true,
        "detail": "rich",
        "documentation": {}
    },
    {
        "label": "print",
        "importPath": "rich",
        "description": "rich",
        "isExtraImport": true,
        "detail": "rich",
        "documentation": {}
    },
    {
        "label": "RichHandler",
        "importPath": "rich.logging",
        "description": "rich.logging",
        "isExtraImport": true,
        "detail": "rich.logging",
        "documentation": {}
    },
    {
        "label": "cancel_all_orders",
        "importPath": "repo",
        "description": "repo",
        "isExtraImport": true,
        "detail": "repo",
        "documentation": {}
    },
    {
        "label": "close_listen_key",
        "importPath": "repo",
        "description": "repo",
        "isExtraImport": true,
        "detail": "repo",
        "documentation": {}
    },
    {
        "label": "get_listen_key",
        "importPath": "repo",
        "description": "repo",
        "isExtraImport": true,
        "detail": "repo",
        "documentation": {}
    },
    {
        "label": "keep_alive",
        "importPath": "repo",
        "description": "repo",
        "isExtraImport": true,
        "detail": "repo",
        "documentation": {}
    },
    {
        "label": "get_time",
        "importPath": "repo",
        "description": "repo",
        "isExtraImport": true,
        "detail": "repo",
        "documentation": {}
    },
    {
        "label": "get_available_balance",
        "importPath": "repo",
        "description": "repo",
        "isExtraImport": true,
        "detail": "repo",
        "documentation": {}
    },
    {
        "label": "get_hedge_position_amount",
        "importPath": "repo",
        "description": "repo",
        "isExtraImport": true,
        "detail": "repo",
        "documentation": {}
    },
    {
        "label": "get_leverage",
        "importPath": "repo",
        "description": "repo",
        "isExtraImport": true,
        "detail": "repo",
        "documentation": {}
    },
    {
        "label": "get_mark_price",
        "importPath": "repo",
        "description": "repo",
        "isExtraImport": true,
        "detail": "repo",
        "documentation": {}
    },
    {
        "label": "get_position_entry_price",
        "importPath": "repo",
        "description": "repo",
        "isExtraImport": true,
        "detail": "repo",
        "documentation": {}
    },
    {
        "label": "new_batch_order",
        "importPath": "repo",
        "description": "repo",
        "isExtraImport": true,
        "detail": "repo",
        "documentation": {}
    },
    {
        "label": "new_order",
        "importPath": "repo",
        "description": "repo",
        "isExtraImport": true,
        "detail": "repo",
        "documentation": {}
    },
    {
        "label": "trade",
        "importPath": "trade",
        "description": "trade",
        "isExtraImport": true,
        "detail": "trade",
        "documentation": {}
    },
    {
        "label": "work",
        "importPath": "trade",
        "description": "trade",
        "isExtraImport": true,
        "detail": "trade",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "ClientError",
        "importPath": "binance.error",
        "description": "binance.error",
        "isExtraImport": true,
        "detail": "binance.error",
        "documentation": {}
    },
    {
        "label": "UMFutures",
        "importPath": "binance.um_futures",
        "description": "binance.um_futures",
        "isExtraImport": true,
        "detail": "binance.um_futures",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "rec",
        "importPath": "numpy",
        "description": "numpy",
        "isExtraImport": true,
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "HTTPAdapter",
        "importPath": "requests.adapters",
        "description": "requests.adapters",
        "isExtraImport": true,
        "detail": "requests.adapters",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "cancel_all_orders_request",
        "importPath": "network",
        "description": "network",
        "isExtraImport": true,
        "detail": "network",
        "documentation": {}
    },
    {
        "label": "close_listen_key_request",
        "importPath": "network",
        "description": "network",
        "isExtraImport": true,
        "detail": "network",
        "documentation": {}
    },
    {
        "label": "get_account_info_request",
        "importPath": "network",
        "description": "network",
        "isExtraImport": true,
        "detail": "network",
        "documentation": {}
    },
    {
        "label": "get_leverage_request",
        "importPath": "network",
        "description": "network",
        "isExtraImport": true,
        "detail": "network",
        "documentation": {}
    },
    {
        "label": "get_listen_key_request",
        "importPath": "network",
        "description": "network",
        "isExtraImport": true,
        "detail": "network",
        "documentation": {}
    },
    {
        "label": "get_mark_price_request",
        "importPath": "network",
        "description": "network",
        "isExtraImport": true,
        "detail": "network",
        "documentation": {}
    },
    {
        "label": "get_open_orders_request",
        "importPath": "network",
        "description": "network",
        "isExtraImport": true,
        "detail": "network",
        "documentation": {}
    },
    {
        "label": "get_position_risk_request",
        "importPath": "network",
        "description": "network",
        "isExtraImport": true,
        "detail": "network",
        "documentation": {}
    },
    {
        "label": "keep_alive_request",
        "importPath": "network",
        "description": "network",
        "isExtraImport": true,
        "detail": "network",
        "documentation": {}
    },
    {
        "label": "new_batch_order_request",
        "importPath": "network",
        "description": "network",
        "isExtraImport": true,
        "detail": "network",
        "documentation": {}
    },
    {
        "label": "new_order_request",
        "importPath": "network",
        "description": "network",
        "isExtraImport": true,
        "detail": "network",
        "documentation": {}
    },
    {
        "label": "new_price_match_order_request",
        "importPath": "network",
        "description": "network",
        "isExtraImport": true,
        "detail": "network",
        "documentation": {}
    },
    {
        "label": "get_time_request",
        "importPath": "network",
        "description": "network",
        "isExtraImport": true,
        "detail": "network",
        "documentation": {}
    },
    {
        "label": "trade_all_price_match_queue",
        "importPath": "strategy",
        "description": "strategy",
        "isExtraImport": true,
        "detail": "strategy",
        "documentation": {}
    },
    {
        "label": "trade_fixed_range",
        "importPath": "strategy",
        "description": "strategy",
        "isExtraImport": true,
        "detail": "strategy",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "islice",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "floor",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "test_key",
        "kind": 2,
        "importPath": "tests.consts_test",
        "description": "tests.consts_test",
        "peekOfCode": "def test_key():\n    assert (\n        consts.KEY == \"1bd171c9e4c7831ace3c358d9c93ba3cc0304728d90a243830428a2c0dabfead\"\n    )\ndef test_secret():\n    assert (\n        consts.SECRET\n        == \"787a28958d7d9ce9e189527b2b4d8a4b608c8474d6447a23c3c88d9ff81c1269\"\n    )\ndef test_base_url():",
        "detail": "tests.consts_test",
        "documentation": {}
    },
    {
        "label": "test_secret",
        "kind": 2,
        "importPath": "tests.consts_test",
        "description": "tests.consts_test",
        "peekOfCode": "def test_secret():\n    assert (\n        consts.SECRET\n        == \"787a28958d7d9ce9e189527b2b4d8a4b608c8474d6447a23c3c88d9ff81c1269\"\n    )\ndef test_base_url():\n    assert consts.BASE_URL == \"https://testnet.binancefuture.com\"",
        "detail": "tests.consts_test",
        "documentation": {}
    },
    {
        "label": "test_base_url",
        "kind": 2,
        "importPath": "tests.consts_test",
        "description": "tests.consts_test",
        "peekOfCode": "def test_base_url():\n    assert consts.BASE_URL == \"https://testnet.binancefuture.com\"",
        "detail": "tests.consts_test",
        "documentation": {}
    },
    {
        "label": "test_asd",
        "kind": 2,
        "importPath": "tests.test_network",
        "description": "tests.test_network",
        "peekOfCode": "def test_asd():\n    assert 1 == 1",
        "detail": "tests.test_network",
        "documentation": {}
    },
    {
        "label": "order_value",
        "kind": 2,
        "importPath": "tests.test_utils",
        "description": "tests.test_utils",
        "peekOfCode": "def order_value():\n    symbol = TickerSymbol.BTCUSDT\n    side = Side.BUY\n    quantity = 1.0\n    price = 1.0\n    position_side = PositionSide.LONG\n    order_type = OrderType.LIMIT\n    time_in_force = TIF.GTC\n    price_match = PriceMatchNone.NONE\n    return (",
        "detail": "tests.test_utils",
        "documentation": {}
    },
    {
        "label": "test_create_order_price",
        "kind": 2,
        "importPath": "tests.test_utils",
        "description": "tests.test_utils",
        "peekOfCode": "def test_create_order_price():\n    (\n        symbol,\n        side,\n        quantity,\n        price,\n        position_side,\n        order_type,\n        time_in_force,\n        price_match,",
        "detail": "tests.test_utils",
        "documentation": {}
    },
    {
        "label": "test_create_order_price_value",
        "kind": 2,
        "importPath": "tests.test_utils",
        "description": "tests.test_utils",
        "peekOfCode": "def test_create_order_price_value():\n    (\n        symbol,\n        side,\n        quantity,\n        price,\n        position_side,\n        order_type,\n        time_in_force,\n        price_match,",
        "detail": "tests.test_utils",
        "documentation": {}
    },
    {
        "label": "test_create_order_price_match",
        "kind": 2,
        "importPath": "tests.test_utils",
        "description": "tests.test_utils",
        "peekOfCode": "def test_create_order_price_match():\n    (\n        symbol,\n        side,\n        quantity,\n        price,\n        position_side,\n        order_type,\n        time_in_force,\n        price_match,",
        "detail": "tests.test_utils",
        "documentation": {}
    },
    {
        "label": "test_scaled_amounts",
        "kind": 2,
        "importPath": "tests.test_utils",
        "description": "tests.test_utils",
        "peekOfCode": "def test_scaled_amounts():\n    expected_list = [\n        5.865743125390515,\n        5.924400556644421,\n        5.9836445622108645,\n        6.043481007832973,\n        6.103915817911304,\n        6.164954976090415,\n        6.226604525851319,\n        6.2888705711098325,",
        "detail": "tests.test_utils",
        "documentation": {}
    },
    {
        "label": "test_scaled_amounts_sum",
        "kind": 2,
        "importPath": "tests.test_utils",
        "description": "tests.test_utils",
        "peekOfCode": "def test_scaled_amounts_sum():\n    expected_sum = 1000\n    result = get_scaled_amounts(total_amount=1000, volume_scale=1.01, num=100)\n    assert sum(result) == expected_sum",
        "detail": "tests.test_utils",
        "documentation": {}
    },
    {
        "label": "KEY",
        "kind": 5,
        "importPath": "consts",
        "description": "consts",
        "peekOfCode": "KEY = \"1bd171c9e4c7831ace3c358d9c93ba3cc0304728d90a243830428a2c0dabfead\"\nSECRET = \"787a28958d7d9ce9e189527b2b4d8a4b608c8474d6447a23c3c88d9ff81c1269\"\nBASE_URL = \"https://testnet.binancefuture.com\"",
        "detail": "consts",
        "documentation": {}
    },
    {
        "label": "SECRET",
        "kind": 5,
        "importPath": "consts",
        "description": "consts",
        "peekOfCode": "SECRET = \"787a28958d7d9ce9e189527b2b4d8a4b608c8474d6447a23c3c88d9ff81c1269\"\nBASE_URL = \"https://testnet.binancefuture.com\"",
        "detail": "consts",
        "documentation": {}
    },
    {
        "label": "BASE_URL",
        "kind": 5,
        "importPath": "consts",
        "description": "consts",
        "peekOfCode": "BASE_URL = \"https://testnet.binancefuture.com\"",
        "detail": "consts",
        "documentation": {}
    },
    {
        "label": "Order",
        "kind": 6,
        "importPath": "data",
        "description": "data",
        "peekOfCode": "class Order:\n    symbol: TickerSymbol\n    side: Side\n    quantity: float\n    positionSide: PositionSide\n    price: float\n    type: OrderType = OrderType.LIMIT\n    timeInForce: TIF = TIF.GTC\n    priceMatch: PriceMatch = PriceMatchNone.NONE",
        "detail": "data",
        "documentation": {}
    },
    {
        "label": "AutoName",
        "kind": 6,
        "importPath": "enums",
        "description": "enums",
        "peekOfCode": "class AutoName(Enum):\n    # noinspection PyMethodParameters\n    def _generate_next_value_(name, start, count, last_values):\n        return name\nclass PriceMatch(Enum):\n    # noinspection PyMethodParameters\n    def _generate_next_value_(name, start, count, last_values):\n        return name\nclass PriceMatchNone(PriceMatch):\n    NONE = auto()",
        "detail": "enums",
        "documentation": {}
    },
    {
        "label": "PriceMatch",
        "kind": 6,
        "importPath": "enums",
        "description": "enums",
        "peekOfCode": "class PriceMatch(Enum):\n    # noinspection PyMethodParameters\n    def _generate_next_value_(name, start, count, last_values):\n        return name\nclass PriceMatchNone(PriceMatch):\n    NONE = auto()\nclass PriceMatchOpponent(PriceMatch):\n    OPPONENT = auto()\n    OPPONENT_5 = auto()\n    OPPONENT_10 = auto()",
        "detail": "enums",
        "documentation": {}
    },
    {
        "label": "PriceMatchNone",
        "kind": 6,
        "importPath": "enums",
        "description": "enums",
        "peekOfCode": "class PriceMatchNone(PriceMatch):\n    NONE = auto()\nclass PriceMatchOpponent(PriceMatch):\n    OPPONENT = auto()\n    OPPONENT_5 = auto()\n    OPPONENT_10 = auto()\n    OPPONENT_20 = auto()\nclass PriceMatchQueue(PriceMatch):\n    QUEUE = auto()\n    QUEUE_5 = auto()",
        "detail": "enums",
        "documentation": {}
    },
    {
        "label": "PriceMatchOpponent",
        "kind": 6,
        "importPath": "enums",
        "description": "enums",
        "peekOfCode": "class PriceMatchOpponent(PriceMatch):\n    OPPONENT = auto()\n    OPPONENT_5 = auto()\n    OPPONENT_10 = auto()\n    OPPONENT_20 = auto()\nclass PriceMatchQueue(PriceMatch):\n    QUEUE = auto()\n    QUEUE_5 = auto()\n    QUEUE_10 = auto()\n    QUEUE_20 = auto()",
        "detail": "enums",
        "documentation": {}
    },
    {
        "label": "PriceMatchQueue",
        "kind": 6,
        "importPath": "enums",
        "description": "enums",
        "peekOfCode": "class PriceMatchQueue(PriceMatch):\n    QUEUE = auto()\n    QUEUE_5 = auto()\n    QUEUE_10 = auto()\n    QUEUE_20 = auto()\nclass TickerSymbol(AutoName):\n    BTCUSDT = auto()\nclass Side(AutoName):\n    BUY = auto()\n    SELL = auto()",
        "detail": "enums",
        "documentation": {}
    },
    {
        "label": "TickerSymbol",
        "kind": 6,
        "importPath": "enums",
        "description": "enums",
        "peekOfCode": "class TickerSymbol(AutoName):\n    BTCUSDT = auto()\nclass Side(AutoName):\n    BUY = auto()\n    SELL = auto()\nclass PositionSide(AutoName):\n    BOTH = auto()\n    LONG = auto()\n    SHORT = auto()\nclass Strategy(Enum):",
        "detail": "enums",
        "documentation": {}
    },
    {
        "label": "Side",
        "kind": 6,
        "importPath": "enums",
        "description": "enums",
        "peekOfCode": "class Side(AutoName):\n    BUY = auto()\n    SELL = auto()\nclass PositionSide(AutoName):\n    BOTH = auto()\n    LONG = auto()\n    SHORT = auto()\nclass Strategy(Enum):\n    FIXED_RANGE = auto()\n    PRICE_MATCH_QUEUE = auto()",
        "detail": "enums",
        "documentation": {}
    },
    {
        "label": "PositionSide",
        "kind": 6,
        "importPath": "enums",
        "description": "enums",
        "peekOfCode": "class PositionSide(AutoName):\n    BOTH = auto()\n    LONG = auto()\n    SHORT = auto()\nclass Strategy(Enum):\n    FIXED_RANGE = auto()\n    PRICE_MATCH_QUEUE = auto()\nclass OrderType(AutoName):\n    LIMIT = auto()\n    MARKET = auto()",
        "detail": "enums",
        "documentation": {}
    },
    {
        "label": "Strategy",
        "kind": 6,
        "importPath": "enums",
        "description": "enums",
        "peekOfCode": "class Strategy(Enum):\n    FIXED_RANGE = auto()\n    PRICE_MATCH_QUEUE = auto()\nclass OrderType(AutoName):\n    LIMIT = auto()\n    MARKET = auto()\n    STOP = auto()\n    STOP_MARKET = auto()\n    TAKE_PROFIT = auto()\n    TAKE_PROFIT_MARKET = auto()",
        "detail": "enums",
        "documentation": {}
    },
    {
        "label": "OrderType",
        "kind": 6,
        "importPath": "enums",
        "description": "enums",
        "peekOfCode": "class OrderType(AutoName):\n    LIMIT = auto()\n    MARKET = auto()\n    STOP = auto()\n    STOP_MARKET = auto()\n    TAKE_PROFIT = auto()\n    TAKE_PROFIT_MARKET = auto()\n    TRAILING_STOP_MARKET = auto()\nclass TIF(AutoName):\n    GTC = auto()",
        "detail": "enums",
        "documentation": {}
    },
    {
        "label": "TIF",
        "kind": 6,
        "importPath": "enums",
        "description": "enums",
        "peekOfCode": "class TIF(AutoName):\n    GTC = auto()\n    IOC = auto()\n    FOK = auto()\n    GTX = auto()\n    GTD = auto()\nclass AmountSpacing(Enum):\n    LINEAR = auto()\n    GEOMETRIC = auto()",
        "detail": "enums",
        "documentation": {}
    },
    {
        "label": "AmountSpacing",
        "kind": 6,
        "importPath": "enums",
        "description": "enums",
        "peekOfCode": "class AmountSpacing(Enum):\n    LINEAR = auto()\n    GEOMETRIC = auto()",
        "detail": "enums",
        "documentation": {}
    },
    {
        "label": "message_handler",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def message_handler(_, message) -> None:\n    print(message)\ndef main() -> None:\n    delay_seconds = 20\n    once = False\n    listen_key = get_listen_key()\n    ws_client = UMFuturesWebsocketClient(on_message=message_handler)\n    ws_client.user_data(\n        listen_key=listen_key,\n        id=1,",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def main() -> None:\n    delay_seconds = 20\n    once = False\n    listen_key = get_listen_key()\n    ws_client = UMFuturesWebsocketClient(on_message=message_handler)\n    ws_client.user_data(\n        listen_key=listen_key,\n        id=1,\n    )\n    symbol = TickerSymbol.BTCUSDT",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "FORMAT",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "FORMAT = \"%(message)s\"\nlogging.basicConfig(\n    level=logging.ERROR,\n    format=FORMAT,\n    datefmt=\"[%X]\",\n    handlers=[RichHandler(markup=True)],\n)\nconfig_logging(logging, logging.ERROR)\ndef message_handler(_, message) -> None:\n    print(message)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "log_client_error",
        "kind": 2,
        "importPath": "network",
        "description": "network",
        "peekOfCode": "def log_client_error(error: ClientError) -> None:\n    logging.error(f\"{error.status_code=}, {error.error_code=}, {error.error_message=}\")\ndef cancel_all_orders_request(\n    symbol, receive_window: int = 4000\n) -> Any | dict[Any, Any]:\n    response = {}\n    try:\n        response = client.cancel_open_orders(symbol=symbol, recvWindow=receive_window)\n    except ClientError as error:\n        log_client_error(error)",
        "detail": "network",
        "documentation": {}
    },
    {
        "label": "cancel_all_orders_request",
        "kind": 2,
        "importPath": "network",
        "description": "network",
        "peekOfCode": "def cancel_all_orders_request(\n    symbol, receive_window: int = 4000\n) -> Any | dict[Any, Any]:\n    response = {}\n    try:\n        response = client.cancel_open_orders(symbol=symbol, recvWindow=receive_window)\n    except ClientError as error:\n        log_client_error(error)\n    finally:\n        return response",
        "detail": "network",
        "documentation": {}
    },
    {
        "label": "new_price_match_order_request",
        "kind": 2,
        "importPath": "network",
        "description": "network",
        "peekOfCode": "def new_price_match_order_request(\n    symbol: str,\n    side: str,\n    quantity: float,\n    position_side: str,\n    order_type: str,\n    time_in_force: str,\n    price_match: str,\n) -> Any | dict[Any, Any]:\n    response = {}",
        "detail": "network",
        "documentation": {}
    },
    {
        "label": "new_order_request",
        "kind": 2,
        "importPath": "network",
        "description": "network",
        "peekOfCode": "def new_order_request(\n    symbol: str,\n    side: str,\n    quantity: float,\n    position_side: str,\n    price: float,\n    order_type: str,\n    time_in_force: str,\n) -> Any | dict[Any, Any]:\n    response = {}",
        "detail": "network",
        "documentation": {}
    },
    {
        "label": "new_batch_order_request",
        "kind": 2,
        "importPath": "network",
        "description": "network",
        "peekOfCode": "def new_batch_order_request(params) -> Any | dict[Any, Any]:\n    response = {}\n    try:\n        response = client.new_batch_order(batchOrders=params)\n    except ClientError as error:\n        log_client_error(error)\n    finally:\n        return response\ndef get_position_risk_request(symbol: str) -> Any | dict[Any, Any]:\n    response = {}",
        "detail": "network",
        "documentation": {}
    },
    {
        "label": "get_position_risk_request",
        "kind": 2,
        "importPath": "network",
        "description": "network",
        "peekOfCode": "def get_position_risk_request(symbol: str) -> Any | dict[Any, Any]:\n    response = {}\n    try:\n        response = client.get_position_risk(symbol=symbol, recvWindow=6000)\n    except ClientError as error:\n        log_client_error(error)\n    finally:\n        return response\ndef get_leverage_request(symbol: str) -> Any | dict[Any, Any]:\n    response = {}",
        "detail": "network",
        "documentation": {}
    },
    {
        "label": "get_leverage_request",
        "kind": 2,
        "importPath": "network",
        "description": "network",
        "peekOfCode": "def get_leverage_request(symbol: str) -> Any | dict[Any, Any]:\n    response = {}\n    try:\n        response = get_position_risk_request(symbol=symbol)\n    except ClientError as error:\n        log_client_error(error)\n    finally:\n        return response\ndef get_account_info_request() -> Any | dict[Any, Any]:\n    response = {}",
        "detail": "network",
        "documentation": {}
    },
    {
        "label": "get_account_info_request",
        "kind": 2,
        "importPath": "network",
        "description": "network",
        "peekOfCode": "def get_account_info_request() -> Any | dict[Any, Any]:\n    response = {}\n    try:\n        # noinspection PyCallingNonCallable\n        response = client.account(recvWindow=6000)\n    except ClientError as error:\n        log_client_error(error)\n    finally:\n        return response\ndef get_mark_price_request(symbol: str) -> Any | dict[Any, Any]:",
        "detail": "network",
        "documentation": {}
    },
    {
        "label": "get_mark_price_request",
        "kind": 2,
        "importPath": "network",
        "description": "network",
        "peekOfCode": "def get_mark_price_request(symbol: str) -> Any | dict[Any, Any]:\n    response = {}\n    try:\n        response = client.mark_price(symbol=symbol)\n    except ClientError as error:\n        log_client_error(error)\n    finally:\n        return response\ndef get_listen_key_request() -> Any | dict[Any, Any]:\n    response = {}",
        "detail": "network",
        "documentation": {}
    },
    {
        "label": "get_listen_key_request",
        "kind": 2,
        "importPath": "network",
        "description": "network",
        "peekOfCode": "def get_listen_key_request() -> Any | dict[Any, Any]:\n    response = {}\n    try:\n        response = client.new_listen_key()\n    except ClientError as error:\n        log_client_error(error)\n    finally:\n        return response\ndef close_listen_key_request(listen_key: str) -> Any | dict[Any, Any]:\n    response = {}",
        "detail": "network",
        "documentation": {}
    },
    {
        "label": "close_listen_key_request",
        "kind": 2,
        "importPath": "network",
        "description": "network",
        "peekOfCode": "def close_listen_key_request(listen_key: str) -> Any | dict[Any, Any]:\n    response = {}\n    try:\n        response = client.close_listen_key(listenKey=listen_key)\n    except ClientError as error:\n        log_client_error(error)\n    finally:\n        return response\ndef get_open_orders_request(symbol: str) -> Any | dict[Any, Any]:\n    response = {}",
        "detail": "network",
        "documentation": {}
    },
    {
        "label": "get_open_orders_request",
        "kind": 2,
        "importPath": "network",
        "description": "network",
        "peekOfCode": "def get_open_orders_request(symbol: str) -> Any | dict[Any, Any]:\n    response = {}\n    try:\n        response = client.get_open_orders(symbol=symbol)\n    except ClientError as error:\n        log_client_error(error)\n    finally:\n        return response\ndef keep_alive_request(listen_key: str):\n    response = {}",
        "detail": "network",
        "documentation": {}
    },
    {
        "label": "keep_alive_request",
        "kind": 2,
        "importPath": "network",
        "description": "network",
        "peekOfCode": "def keep_alive_request(listen_key: str):\n    response = {}\n    try:\n        response = client.renew_listen_key(listenKey=listen_key)\n    except ClientError as error:\n        log_client_error(error)\n    finally:\n        return response\ndef get_time_request() -> Any | dict[Any, Any]:\n    response = {}",
        "detail": "network",
        "documentation": {}
    },
    {
        "label": "get_time_request",
        "kind": 2,
        "importPath": "network",
        "description": "network",
        "peekOfCode": "def get_time_request() -> Any | dict[Any, Any]:\n    response = {}\n    try:\n        response = client.time()\n    except ClientError as error:\n        log_client_error(error)\n    finally:\n        return response",
        "detail": "network",
        "documentation": {}
    },
    {
        "label": "adapter",
        "kind": 5,
        "importPath": "network",
        "description": "network",
        "peekOfCode": "adapter = HTTPAdapter(pool_connections=200, pool_maxsize=200)\nclient = UMFutures(key=KEY, secret=SECRET, base_url=BASE_URL)\nclient.session.mount(\"https://\", adapter)\ndef log_client_error(error: ClientError) -> None:\n    logging.error(f\"{error.status_code=}, {error.error_code=}, {error.error_message=}\")\ndef cancel_all_orders_request(\n    symbol, receive_window: int = 4000\n) -> Any | dict[Any, Any]:\n    response = {}\n    try:",
        "detail": "network",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "network",
        "description": "network",
        "peekOfCode": "client = UMFutures(key=KEY, secret=SECRET, base_url=BASE_URL)\nclient.session.mount(\"https://\", adapter)\ndef log_client_error(error: ClientError) -> None:\n    logging.error(f\"{error.status_code=}, {error.error_code=}, {error.error_message=}\")\ndef cancel_all_orders_request(\n    symbol, receive_window: int = 4000\n) -> Any | dict[Any, Any]:\n    response = {}\n    try:\n        response = client.cancel_open_orders(symbol=symbol, recvWindow=receive_window)",
        "detail": "network",
        "documentation": {}
    },
    {
        "label": "get_hedge_position_amount",
        "kind": 2,
        "importPath": "repo",
        "description": "repo",
        "peekOfCode": "def get_hedge_position_amount(symbol: TickerSymbol) -> float:\n    return float(get_position_risk_request(symbol=symbol.name)[0][\"positionAmt\"])\ndef get_position_entry_price(symbol: TickerSymbol):\n    return float(get_position_risk_request(symbol=symbol.name)[0][\"entryPrice\"])\ndef get_available_balance() -> float:\n    return float(get_account_info_request()[\"availableBalance\"])\ndef get_mark_price(symbol: TickerSymbol) -> float:\n    return float(get_mark_price_request(symbol=symbol.name)[\"markPrice\"])\ndef new_order(\n    symbol: TickerSymbol,",
        "detail": "repo",
        "documentation": {}
    },
    {
        "label": "get_position_entry_price",
        "kind": 2,
        "importPath": "repo",
        "description": "repo",
        "peekOfCode": "def get_position_entry_price(symbol: TickerSymbol):\n    return float(get_position_risk_request(symbol=symbol.name)[0][\"entryPrice\"])\ndef get_available_balance() -> float:\n    return float(get_account_info_request()[\"availableBalance\"])\ndef get_mark_price(symbol: TickerSymbol) -> float:\n    return float(get_mark_price_request(symbol=symbol.name)[\"markPrice\"])\ndef new_order(\n    symbol: TickerSymbol,\n    side: Side,\n    quantity: float,",
        "detail": "repo",
        "documentation": {}
    },
    {
        "label": "get_available_balance",
        "kind": 2,
        "importPath": "repo",
        "description": "repo",
        "peekOfCode": "def get_available_balance() -> float:\n    return float(get_account_info_request()[\"availableBalance\"])\ndef get_mark_price(symbol: TickerSymbol) -> float:\n    return float(get_mark_price_request(symbol=symbol.name)[\"markPrice\"])\ndef new_order(\n    symbol: TickerSymbol,\n    side: Side,\n    quantity: float,\n    position_side: PositionSide,\n    price: float = -1.0,",
        "detail": "repo",
        "documentation": {}
    },
    {
        "label": "get_mark_price",
        "kind": 2,
        "importPath": "repo",
        "description": "repo",
        "peekOfCode": "def get_mark_price(symbol: TickerSymbol) -> float:\n    return float(get_mark_price_request(symbol=symbol.name)[\"markPrice\"])\ndef new_order(\n    symbol: TickerSymbol,\n    side: Side,\n    quantity: float,\n    position_side: PositionSide,\n    price: float = -1.0,\n    order_type: OrderType = OrderType.LIMIT,\n    time_in_force: TIF = TIF.GTC,",
        "detail": "repo",
        "documentation": {}
    },
    {
        "label": "new_order",
        "kind": 2,
        "importPath": "repo",
        "description": "repo",
        "peekOfCode": "def new_order(\n    symbol: TickerSymbol,\n    side: Side,\n    quantity: float,\n    position_side: PositionSide,\n    price: float = -1.0,\n    order_type: OrderType = OrderType.LIMIT,\n    time_in_force: TIF = TIF.GTC,\n    price_match: PriceMatch = PriceMatchNone.NONE,\n) -> Any | dict[Any, Any]:",
        "detail": "repo",
        "documentation": {}
    },
    {
        "label": "new_batch_order",
        "kind": 2,
        "importPath": "repo",
        "description": "repo",
        "peekOfCode": "def new_batch_order(orders: list) -> Any | dict[Any, Any]:\n    new_orders = []\n    for order in orders:\n        new_dict = {}\n        for key in order:\n            key_value = order[key]\n            if isinstance(key_value, Enum):\n                new_dict[key] = key_value.value\n            else:\n                new_dict[key] = str(key_value)",
        "detail": "repo",
        "documentation": {}
    },
    {
        "label": "get_leverage",
        "kind": 2,
        "importPath": "repo",
        "description": "repo",
        "peekOfCode": "def get_leverage(symbol: TickerSymbol) -> int:\n    return int(get_leverage_request(symbol=symbol.name)[0][\"leverage\"])\ndef cancel_all_orders(symbol: TickerSymbol) -> Any | dict[Any, Any]:\n    return cancel_all_orders_request(symbol=symbol.name)\ndef get_listen_key() -> str:\n    return get_listen_key_request()[\"listenKey\"]\ndef close_listen_key(listen_key: str) -> Any | dict[Any, Any]:\n    return close_listen_key_request(listen_key=listen_key)\ndef get_open_orders(symbol: TickerSymbol) -> Any | dict[Any, Any]:\n    return get_open_orders_request(symbol=symbol.name)",
        "detail": "repo",
        "documentation": {}
    },
    {
        "label": "cancel_all_orders",
        "kind": 2,
        "importPath": "repo",
        "description": "repo",
        "peekOfCode": "def cancel_all_orders(symbol: TickerSymbol) -> Any | dict[Any, Any]:\n    return cancel_all_orders_request(symbol=symbol.name)\ndef get_listen_key() -> str:\n    return get_listen_key_request()[\"listenKey\"]\ndef close_listen_key(listen_key: str) -> Any | dict[Any, Any]:\n    return close_listen_key_request(listen_key=listen_key)\ndef get_open_orders(symbol: TickerSymbol) -> Any | dict[Any, Any]:\n    return get_open_orders_request(symbol=symbol.name)\ndef keep_alive(listen_key: str):\n    return keep_alive_request(listen_key=listen_key)",
        "detail": "repo",
        "documentation": {}
    },
    {
        "label": "get_listen_key",
        "kind": 2,
        "importPath": "repo",
        "description": "repo",
        "peekOfCode": "def get_listen_key() -> str:\n    return get_listen_key_request()[\"listenKey\"]\ndef close_listen_key(listen_key: str) -> Any | dict[Any, Any]:\n    return close_listen_key_request(listen_key=listen_key)\ndef get_open_orders(symbol: TickerSymbol) -> Any | dict[Any, Any]:\n    return get_open_orders_request(symbol=symbol.name)\ndef keep_alive(listen_key: str):\n    return keep_alive_request(listen_key=listen_key)\ndef get_time() -> int:\n    return get_time_request()[\"serverTime\"]",
        "detail": "repo",
        "documentation": {}
    },
    {
        "label": "close_listen_key",
        "kind": 2,
        "importPath": "repo",
        "description": "repo",
        "peekOfCode": "def close_listen_key(listen_key: str) -> Any | dict[Any, Any]:\n    return close_listen_key_request(listen_key=listen_key)\ndef get_open_orders(symbol: TickerSymbol) -> Any | dict[Any, Any]:\n    return get_open_orders_request(symbol=symbol.name)\ndef keep_alive(listen_key: str):\n    return keep_alive_request(listen_key=listen_key)\ndef get_time() -> int:\n    return get_time_request()[\"serverTime\"]",
        "detail": "repo",
        "documentation": {}
    },
    {
        "label": "get_open_orders",
        "kind": 2,
        "importPath": "repo",
        "description": "repo",
        "peekOfCode": "def get_open_orders(symbol: TickerSymbol) -> Any | dict[Any, Any]:\n    return get_open_orders_request(symbol=symbol.name)\ndef keep_alive(listen_key: str):\n    return keep_alive_request(listen_key=listen_key)\ndef get_time() -> int:\n    return get_time_request()[\"serverTime\"]",
        "detail": "repo",
        "documentation": {}
    },
    {
        "label": "keep_alive",
        "kind": 2,
        "importPath": "repo",
        "description": "repo",
        "peekOfCode": "def keep_alive(listen_key: str):\n    return keep_alive_request(listen_key=listen_key)\ndef get_time() -> int:\n    return get_time_request()[\"serverTime\"]",
        "detail": "repo",
        "documentation": {}
    },
    {
        "label": "get_time",
        "kind": 2,
        "importPath": "repo",
        "description": "repo",
        "peekOfCode": "def get_time() -> int:\n    return get_time_request()[\"serverTime\"]",
        "detail": "repo",
        "documentation": {}
    },
    {
        "label": "trade_fixed_range",
        "kind": 2,
        "importPath": "strategy",
        "description": "strategy",
        "peekOfCode": "def trade_fixed_range(\n    symbol: TickerSymbol,\n    position_side: PositionSide,\n    center_price: float,\n    available_balance: float,\n    sell_amount: float,\n    leverage: int,\n    buy_orders_num: int = 100,\n    sell_orders_num: int = 100,\n    tif: TIF = TIF.GTC,",
        "detail": "strategy",
        "documentation": {}
    },
    {
        "label": "check_grid_maxs_and_mins",
        "kind": 2,
        "importPath": "strategy",
        "description": "strategy",
        "peekOfCode": "def check_grid_maxs_and_mins(\n    price_sell_max, price_sell_min, price_buy_max, price_buy_min\n) -> None:\n    if price_sell_min >= price_sell_max:\n        raise Exception(\"price_sell_min >= price_sell_max\")\n    if price_buy_max >= price_sell_min:\n        raise Exception(\"price_buy_max >= price_sell_min\")\n    if price_buy_min >= price_buy_max:\n        raise Exception(\"price_buy_min >= price_buy_max\")\ndef get_grid_maxs_and_mins(",
        "detail": "strategy",
        "documentation": {}
    },
    {
        "label": "get_grid_maxs_and_mins",
        "kind": 2,
        "importPath": "strategy",
        "description": "strategy",
        "peekOfCode": "def get_grid_maxs_and_mins(\n    center_price: float,\n    price_sell_max_mult: float,\n    price_sell_min_mult: float,\n    price_buy_max_mult: float,\n    price_buy_min_mult: float,\n) -> tuple[float, float, float, float]:\n    price_sell_max = center_price * price_sell_max_mult\n    price_sell_min = center_price * price_sell_min_mult\n    price_buy_max = center_price * price_buy_max_mult",
        "detail": "strategy",
        "documentation": {}
    },
    {
        "label": "trade_all_price_match_queue",
        "kind": 2,
        "importPath": "strategy",
        "description": "strategy",
        "peekOfCode": "def trade_all_price_match_queue(\n    symbol: TickerSymbol,\n    position_side: PositionSide,\n    sell_amount: float,\n    buy_orders_num: int = 4,\n    sell_orders_num: int = 4,\n    tif: TIF = TIF.GTC,\n) -> list[dict[str, Any]]:\n    buy_amount = 1.0  # get_max_buy_amount(symbol)\n    buy_order_amount = buy_amount / float(buy_orders_num)",
        "detail": "strategy",
        "documentation": {}
    },
    {
        "label": "work",
        "kind": 2,
        "importPath": "trade",
        "description": "trade",
        "peekOfCode": "def work(order) -> Any | dict[Any, Any]:\n    if isinstance(order, list):\n        return new_batch_order(orders=order)\n    if \"priceMatch\" in order:\n        return new_order(\n            symbol=order[\"symbol\"],\n            side=order[\"side\"],\n            quantity=order[\"quantity\"],\n            position_side=order[\"positionSide\"],\n            price_match=order[\"priceMatch\"],",
        "detail": "trade",
        "documentation": {}
    },
    {
        "label": "trade",
        "kind": 2,
        "importPath": "trade",
        "description": "trade",
        "peekOfCode": "def trade(\n    strategy: Strategy,\n    symbol: TickerSymbol,\n    position_side: PositionSide,\n    buy_orders_num: int = 100,\n    sell_orders_num: int = 100,\n    tif: TIF = TIF.GTC,\n) -> list[Any]:\n    mark_price = get_mark_price(symbol=symbol)\n    print(f\"{mark_price=}\")",
        "detail": "trade",
        "documentation": {}
    },
    {
        "label": "get_max_buy_amount",
        "kind": 2,
        "importPath": "trade",
        "description": "trade",
        "peekOfCode": "def get_max_buy_amount(symbol: TickerSymbol):\n    return (get_leverage(symbol=symbol) * get_available_balance()) / get_mark_price(\n        symbol=symbol\n    )",
        "detail": "trade",
        "documentation": {}
    },
    {
        "label": "create_order",
        "kind": 2,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "def create_order(\n    symbol: TickerSymbol,\n    side: Side,\n    quantity: float,\n    position_side: PositionSide,\n    price: float = 0.0,\n    order_type: OrderType = OrderType.LIMIT,\n    time_in_force: TIF = TIF.GTC,\n    price_match: PriceMatch = PriceMatchNone.NONE,\n) -> dict[str, Any]:",
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "create_all_queue_price_match_orders",
        "kind": 2,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "def create_all_queue_price_match_orders(\n    symbol: TickerSymbol, side: Side, position_side: PositionSide, quantity: float\n) -> list[Any]:\n    orders = []\n    for name, member in PriceMatchQueue.__members__.items():\n        if quantity > 0.0:\n            orders.append(\n                create_order(\n                    symbol=symbol,\n                    side=side,",
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "create_multiple_orders",
        "kind": 2,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "def create_multiple_orders(\n    symbol: TickerSymbol,\n    side: Side,\n    quantities_and_prices: list[tuple[float, float]],\n    position_side: PositionSide,\n    order_type: OrderType = OrderType.LIMIT,\n    time_in_force: TIF = TIF.GTC,\n    price_match: PriceMatch = PriceMatchNone.NONE,\n) -> list[Any]:\n    result = []",
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "get_orders_quantities_and_prices",
        "kind": 2,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "def get_orders_quantities_and_prices(\n    orders_num: int,\n    high_price: float,\n    low_price: float,\n    amount: float,\n    order_quantity_min: float = -1.0,\n    amount_spacing: AmountSpacing = AmountSpacing.LINEAR,\n) -> list[Any]:\n    quantities_and_prices = []\n    if amount > 0.0 and orders_num > 0:",
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "print_date_and_time",
        "kind": 2,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "def print_date_and_time() -> None:\n    print(f\"date and time = {datetime.datetime.now().strftime('%d/%m/%Y %H:%M:%S')}\")\ndef get_scaled(volume_scale: float, num: int) -> tuple[list[float], float]:\n    scaled: list[float] = [1]\n    for i in range(0, num - 1):\n        scaled.append(scaled[-1] * volume_scale)\n    sum_scaled: float = float(sum(scaled))\n    return scaled, sum_scaled\ndef get_scaled_mults(scaled: list[float], sum_scaled: float) -> list[float]:\n    return list(map(lambda x: x / sum_scaled, scaled))",
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "get_scaled",
        "kind": 2,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "def get_scaled(volume_scale: float, num: int) -> tuple[list[float], float]:\n    scaled: list[float] = [1]\n    for i in range(0, num - 1):\n        scaled.append(scaled[-1] * volume_scale)\n    sum_scaled: float = float(sum(scaled))\n    return scaled, sum_scaled\ndef get_scaled_mults(scaled: list[float], sum_scaled: float) -> list[float]:\n    return list(map(lambda x: x / sum_scaled, scaled))\ndef make_it_smaller(\n    total_amount: float, final_scaled: list[float]",
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "get_scaled_mults",
        "kind": 2,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "def get_scaled_mults(scaled: list[float], sum_scaled: float) -> list[float]:\n    return list(map(lambda x: x / sum_scaled, scaled))\ndef make_it_smaller(\n    total_amount: float, final_scaled: list[float]\n) -> Any | list[float]:\n    sum_final_scaled = sum(final_scaled)\n    final_scaled[-1] -= sum_final_scaled - total_amount\n    if sum_final_scaled > total_amount:\n        final_scaled = make_it_smaller(\n            total_amount=total_amount, final_scaled=final_scaled",
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "make_it_smaller",
        "kind": 2,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "def make_it_smaller(\n    total_amount: float, final_scaled: list[float]\n) -> Any | list[float]:\n    sum_final_scaled = sum(final_scaled)\n    final_scaled[-1] -= sum_final_scaled - total_amount\n    if sum_final_scaled > total_amount:\n        final_scaled = make_it_smaller(\n            total_amount=total_amount, final_scaled=final_scaled\n        )\n    return final_scaled",
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "get_scaled_amounts",
        "kind": 2,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "def get_scaled_amounts(\n    total_amount: float, volume_scale: float, num: int\n) -> list[float]:\n    scaled, sum_scaled = get_scaled(volume_scale=volume_scale, num=num)\n    scaled_mults = get_scaled_mults(scaled=scaled, sum_scaled=sum_scaled)\n    return make_it_smaller(\n        total_amount=total_amount,\n        final_scaled=list(map(lambda x: x * total_amount, scaled_mults)),\n    )\ndef batched(iterable, n):",
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "batched",
        "kind": 2,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "def batched(iterable, n):\n    if n < 1:\n        raise ValueError(\"n must be at least one\")\n    it = iter(iterable)\n    while batch := tuple(islice(it, n)):\n        yield batch\ndef batched_lists(iterable, n) -> list[list[Any]]:\n    b = batched(iterable=iterable, n=n)\n    return [list(i) for i in b]",
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "batched_lists",
        "kind": 2,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "def batched_lists(iterable, n) -> list[list[Any]]:\n    b = batched(iterable=iterable, n=n)\n    return [list(i) for i in b]",
        "detail": "utils",
        "documentation": {}
    }
]