[
    {
        "label": "consts",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "consts",
        "description": "consts",
        "detail": "consts",
        "documentation": {}
    },
    {
        "label": "STREAM_URL",
        "importPath": "consts",
        "description": "consts",
        "isExtraImport": true,
        "detail": "consts",
        "documentation": {}
    },
    {
        "label": "BASE_URL",
        "importPath": "consts",
        "description": "consts",
        "isExtraImport": true,
        "detail": "consts",
        "documentation": {}
    },
    {
        "label": "KEY",
        "importPath": "consts",
        "description": "consts",
        "isExtraImport": true,
        "detail": "consts",
        "documentation": {}
    },
    {
        "label": "SECRET",
        "importPath": "consts",
        "description": "consts",
        "isExtraImport": true,
        "detail": "consts",
        "documentation": {}
    },
    {
        "label": "TIF",
        "importPath": "enums",
        "description": "enums",
        "isExtraImport": true,
        "detail": "enums",
        "documentation": {}
    },
    {
        "label": "OrderType",
        "importPath": "enums",
        "description": "enums",
        "isExtraImport": true,
        "detail": "enums",
        "documentation": {}
    },
    {
        "label": "PositionSide",
        "importPath": "enums",
        "description": "enums",
        "isExtraImport": true,
        "detail": "enums",
        "documentation": {}
    },
    {
        "label": "PriceMatchNone",
        "importPath": "enums",
        "description": "enums",
        "isExtraImport": true,
        "detail": "enums",
        "documentation": {}
    },
    {
        "label": "PriceMatchQueue",
        "importPath": "enums",
        "description": "enums",
        "isExtraImport": true,
        "detail": "enums",
        "documentation": {}
    },
    {
        "label": "Side",
        "importPath": "enums",
        "description": "enums",
        "isExtraImport": true,
        "detail": "enums",
        "documentation": {}
    },
    {
        "label": "TickerSymbol",
        "importPath": "enums",
        "description": "enums",
        "isExtraImport": true,
        "detail": "enums",
        "documentation": {}
    },
    {
        "label": "OrderType",
        "importPath": "enums",
        "description": "enums",
        "isExtraImport": true,
        "detail": "enums",
        "documentation": {}
    },
    {
        "label": "PositionSide",
        "importPath": "enums",
        "description": "enums",
        "isExtraImport": true,
        "detail": "enums",
        "documentation": {}
    },
    {
        "label": "PriceMatch",
        "importPath": "enums",
        "description": "enums",
        "isExtraImport": true,
        "detail": "enums",
        "documentation": {}
    },
    {
        "label": "PriceMatchNone",
        "importPath": "enums",
        "description": "enums",
        "isExtraImport": true,
        "detail": "enums",
        "documentation": {}
    },
    {
        "label": "Side",
        "importPath": "enums",
        "description": "enums",
        "isExtraImport": true,
        "detail": "enums",
        "documentation": {}
    },
    {
        "label": "TickerSymbol",
        "importPath": "enums",
        "description": "enums",
        "isExtraImport": true,
        "detail": "enums",
        "documentation": {}
    },
    {
        "label": "TIF",
        "importPath": "enums",
        "description": "enums",
        "isExtraImport": true,
        "detail": "enums",
        "documentation": {}
    },
    {
        "label": "TIF",
        "importPath": "enums",
        "description": "enums",
        "isExtraImport": true,
        "detail": "enums",
        "documentation": {}
    },
    {
        "label": "OrderType",
        "importPath": "enums",
        "description": "enums",
        "isExtraImport": true,
        "detail": "enums",
        "documentation": {}
    },
    {
        "label": "PositionSide",
        "importPath": "enums",
        "description": "enums",
        "isExtraImport": true,
        "detail": "enums",
        "documentation": {}
    },
    {
        "label": "PriceMatch",
        "importPath": "enums",
        "description": "enums",
        "isExtraImport": true,
        "detail": "enums",
        "documentation": {}
    },
    {
        "label": "PriceMatchNone",
        "importPath": "enums",
        "description": "enums",
        "isExtraImport": true,
        "detail": "enums",
        "documentation": {}
    },
    {
        "label": "Side",
        "importPath": "enums",
        "description": "enums",
        "isExtraImport": true,
        "detail": "enums",
        "documentation": {}
    },
    {
        "label": "TickerSymbol",
        "importPath": "enums",
        "description": "enums",
        "isExtraImport": true,
        "detail": "enums",
        "documentation": {}
    },
    {
        "label": "TIF",
        "importPath": "enums",
        "description": "enums",
        "isExtraImport": true,
        "detail": "enums",
        "documentation": {}
    },
    {
        "label": "AmountSpacing",
        "importPath": "enums",
        "description": "enums",
        "isExtraImport": true,
        "detail": "enums",
        "documentation": {}
    },
    {
        "label": "PositionSide",
        "importPath": "enums",
        "description": "enums",
        "isExtraImport": true,
        "detail": "enums",
        "documentation": {}
    },
    {
        "label": "Side",
        "importPath": "enums",
        "description": "enums",
        "isExtraImport": true,
        "detail": "enums",
        "documentation": {}
    },
    {
        "label": "TickerSymbol",
        "importPath": "enums",
        "description": "enums",
        "isExtraImport": true,
        "detail": "enums",
        "documentation": {}
    },
    {
        "label": "TIF",
        "importPath": "enums",
        "description": "enums",
        "isExtraImport": true,
        "detail": "enums",
        "documentation": {}
    },
    {
        "label": "PositionSide",
        "importPath": "enums",
        "description": "enums",
        "isExtraImport": true,
        "detail": "enums",
        "documentation": {}
    },
    {
        "label": "Strategy",
        "importPath": "enums",
        "description": "enums",
        "isExtraImport": true,
        "detail": "enums",
        "documentation": {}
    },
    {
        "label": "TickerSymbol",
        "importPath": "enums",
        "description": "enums",
        "isExtraImport": true,
        "detail": "enums",
        "documentation": {}
    },
    {
        "label": "ALL_ENUMS",
        "importPath": "enums",
        "description": "enums",
        "isExtraImport": true,
        "detail": "enums",
        "documentation": {}
    },
    {
        "label": "TIF",
        "importPath": "enums",
        "description": "enums",
        "isExtraImport": true,
        "detail": "enums",
        "documentation": {}
    },
    {
        "label": "AmountSpacing",
        "importPath": "enums",
        "description": "enums",
        "isExtraImport": true,
        "detail": "enums",
        "documentation": {}
    },
    {
        "label": "OrderType",
        "importPath": "enums",
        "description": "enums",
        "isExtraImport": true,
        "detail": "enums",
        "documentation": {}
    },
    {
        "label": "PositionSide",
        "importPath": "enums",
        "description": "enums",
        "isExtraImport": true,
        "detail": "enums",
        "documentation": {}
    },
    {
        "label": "PriceMatch",
        "importPath": "enums",
        "description": "enums",
        "isExtraImport": true,
        "detail": "enums",
        "documentation": {}
    },
    {
        "label": "PriceMatchNone",
        "importPath": "enums",
        "description": "enums",
        "isExtraImport": true,
        "detail": "enums",
        "documentation": {}
    },
    {
        "label": "PriceMatchQueue",
        "importPath": "enums",
        "description": "enums",
        "isExtraImport": true,
        "detail": "enums",
        "documentation": {}
    },
    {
        "label": "Side",
        "importPath": "enums",
        "description": "enums",
        "isExtraImport": true,
        "detail": "enums",
        "documentation": {}
    },
    {
        "label": "Strategy",
        "importPath": "enums",
        "description": "enums",
        "isExtraImport": true,
        "detail": "enums",
        "documentation": {}
    },
    {
        "label": "TickerSymbol",
        "importPath": "enums",
        "description": "enums",
        "isExtraImport": true,
        "detail": "enums",
        "documentation": {}
    },
    {
        "label": "create_order",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "get_scaled_amounts",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "batched_lists",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "get_inputs_from_file",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "create_all_queue_price_match_orders",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "create_multiple_orders",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "get_grid_maxs_and_mins",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "get_max_buy_amount",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "get_orders_quantities_and_prices",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "auto",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "EnumType",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "concurrent.futures",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "concurrent.futures",
        "description": "concurrent.futures",
        "detail": "concurrent.futures",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "typer",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "typer",
        "description": "typer",
        "detail": "typer",
        "documentation": {}
    },
    {
        "label": "config_logging",
        "importPath": "binance.lib.utils",
        "description": "binance.lib.utils",
        "isExtraImport": true,
        "detail": "binance.lib.utils",
        "documentation": {}
    },
    {
        "label": "UMFuturesWebsocketClient",
        "importPath": "binance.websocket.um_futures.websocket_client",
        "description": "binance.websocket.um_futures.websocket_client",
        "isExtraImport": true,
        "detail": "binance.websocket.um_futures.websocket_client",
        "documentation": {}
    },
    {
        "label": "Live",
        "importPath": "rich.live",
        "description": "rich.live",
        "isExtraImport": true,
        "detail": "rich.live",
        "documentation": {}
    },
    {
        "label": "Live",
        "importPath": "rich.live",
        "description": "rich.live",
        "isExtraImport": true,
        "detail": "rich.live",
        "documentation": {}
    },
    {
        "label": "RichHandler",
        "importPath": "rich.logging",
        "description": "rich.logging",
        "isExtraImport": true,
        "detail": "rich.logging",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "rich.table",
        "description": "rich.table",
        "isExtraImport": true,
        "detail": "rich.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "rich.table",
        "description": "rich.table",
        "isExtraImport": true,
        "detail": "rich.table",
        "documentation": {}
    },
    {
        "label": "TradeRepo",
        "importPath": "repo",
        "description": "repo",
        "isExtraImport": true,
        "detail": "repo",
        "documentation": {}
    },
    {
        "label": "TradeRepo",
        "importPath": "repo",
        "description": "repo",
        "isExtraImport": true,
        "detail": "repo",
        "documentation": {}
    },
    {
        "label": "Trade",
        "importPath": "trade",
        "description": "trade",
        "isExtraImport": true,
        "detail": "trade",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "ClientError",
        "importPath": "binance.error",
        "description": "binance.error",
        "isExtraImport": true,
        "detail": "binance.error",
        "documentation": {}
    },
    {
        "label": "UMFutures",
        "importPath": "binance.um_futures",
        "description": "binance.um_futures",
        "isExtraImport": true,
        "detail": "binance.um_futures",
        "documentation": {}
    },
    {
        "label": "UMFutures",
        "importPath": "binance.um_futures",
        "description": "binance.um_futures",
        "isExtraImport": true,
        "detail": "binance.um_futures",
        "documentation": {}
    },
    {
        "label": "Singleton",
        "importPath": "helpers",
        "description": "helpers",
        "isExtraImport": true,
        "detail": "helpers",
        "documentation": {}
    },
    {
        "label": "Singleton",
        "importPath": "helpers",
        "description": "helpers",
        "isExtraImport": true,
        "detail": "helpers",
        "documentation": {}
    },
    {
        "label": "HTTPAdapter",
        "importPath": "requests.adapters",
        "description": "requests.adapters",
        "isExtraImport": true,
        "detail": "requests.adapters",
        "documentation": {}
    },
    {
        "label": "BinanceNetworkClient",
        "importPath": "network",
        "description": "network",
        "isExtraImport": true,
        "detail": "network",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "trade_all_price_match_queue",
        "importPath": "strategy",
        "description": "strategy",
        "isExtraImport": true,
        "detail": "strategy",
        "documentation": {}
    },
    {
        "label": "trade_fixed_range",
        "importPath": "strategy",
        "description": "strategy",
        "isExtraImport": true,
        "detail": "strategy",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "islice",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "print",
        "importPath": "rich",
        "description": "rich",
        "isExtraImport": true,
        "detail": "rich",
        "documentation": {}
    },
    {
        "label": "test_key",
        "kind": 2,
        "importPath": "tests.consts_test",
        "description": "tests.consts_test",
        "peekOfCode": "def test_key():\n    assert (\n        consts.KEY == \"1bd171c9e4c7831ace3c358d9c93ba3cc0304728d90a243830428a2c0dabfead\"\n    )\ndef test_secret():\n    assert (\n        consts.SECRET\n        == \"787a28958d7d9ce9e189527b2b4d8a4b608c8474d6447a23c3c88d9ff81c1269\"\n    )\ndef test_base_url():",
        "detail": "tests.consts_test",
        "documentation": {}
    },
    {
        "label": "test_secret",
        "kind": 2,
        "importPath": "tests.consts_test",
        "description": "tests.consts_test",
        "peekOfCode": "def test_secret():\n    assert (\n        consts.SECRET\n        == \"787a28958d7d9ce9e189527b2b4d8a4b608c8474d6447a23c3c88d9ff81c1269\"\n    )\ndef test_base_url():\n    assert consts.BASE_URL == \"https://testnet.binancefuture.com\"",
        "detail": "tests.consts_test",
        "documentation": {}
    },
    {
        "label": "test_base_url",
        "kind": 2,
        "importPath": "tests.consts_test",
        "description": "tests.consts_test",
        "peekOfCode": "def test_base_url():\n    assert consts.BASE_URL == \"https://testnet.binancefuture.com\"",
        "detail": "tests.consts_test",
        "documentation": {}
    },
    {
        "label": "test_asd",
        "kind": 2,
        "importPath": "tests.test_network",
        "description": "tests.test_network",
        "peekOfCode": "def test_asd():\n    assert 1 == 1",
        "detail": "tests.test_network",
        "documentation": {}
    },
    {
        "label": "order_value",
        "kind": 2,
        "importPath": "tests.test_utils",
        "description": "tests.test_utils",
        "peekOfCode": "def order_value():\n    symbol = TickerSymbol.BTCUSDT\n    side = Side.BUY\n    quantity = 1.0\n    price = 1.0\n    position_side = PositionSide.LONG\n    order_type = OrderType.LIMIT\n    time_in_force = TIF.GTC\n    price_match = PriceMatchNone.NONE\n    return (",
        "detail": "tests.test_utils",
        "documentation": {}
    },
    {
        "label": "test_create_order_price",
        "kind": 2,
        "importPath": "tests.test_utils",
        "description": "tests.test_utils",
        "peekOfCode": "def test_create_order_price():\n    (\n        symbol,\n        side,\n        quantity,\n        price,\n        position_side,\n        order_type,\n        time_in_force,\n        price_match,",
        "detail": "tests.test_utils",
        "documentation": {}
    },
    {
        "label": "test_create_order_price_value",
        "kind": 2,
        "importPath": "tests.test_utils",
        "description": "tests.test_utils",
        "peekOfCode": "def test_create_order_price_value():\n    (\n        symbol,\n        side,\n        quantity,\n        price,\n        position_side,\n        order_type,\n        time_in_force,\n        price_match,",
        "detail": "tests.test_utils",
        "documentation": {}
    },
    {
        "label": "test_create_order_price_match",
        "kind": 2,
        "importPath": "tests.test_utils",
        "description": "tests.test_utils",
        "peekOfCode": "def test_create_order_price_match():\n    (\n        symbol,\n        side,\n        quantity,\n        price,\n        position_side,\n        order_type,\n        time_in_force,\n        price_match,",
        "detail": "tests.test_utils",
        "documentation": {}
    },
    {
        "label": "test_scaled_amounts",
        "kind": 2,
        "importPath": "tests.test_utils",
        "description": "tests.test_utils",
        "peekOfCode": "def test_scaled_amounts():\n    expected_list = [\n        5.865743125390515,\n        5.924400556644421,\n        5.9836445622108645,\n        6.043481007832973,\n        6.103915817911304,\n        6.164954976090415,\n        6.226604525851319,\n        6.2888705711098325,",
        "detail": "tests.test_utils",
        "documentation": {}
    },
    {
        "label": "test_scaled_amounts_sum",
        "kind": 2,
        "importPath": "tests.test_utils",
        "description": "tests.test_utils",
        "peekOfCode": "def test_scaled_amounts_sum():\n    expected_sum = 1000\n    result = get_scaled_amounts(total_amount=1000, volume_scale=1.01, num=100)\n    assert sum(result) == expected_sum",
        "detail": "tests.test_utils",
        "documentation": {}
    },
    {
        "label": "KEY",
        "kind": 5,
        "importPath": "consts",
        "description": "consts",
        "peekOfCode": "KEY = \"1bd171c9e4c7831ace3c358d9c93ba3cc0304728d90a243830428a2c0dabfead\"\nSECRET = \"787a28958d7d9ce9e189527b2b4d8a4b608c8474d6447a23c3c88d9ff81c1269\"\nBASE_URL = \"https://testnet.binancefuture.com\"\nSTREAM_URL = \"wss://stream.binancefuture.com\"",
        "detail": "consts",
        "documentation": {}
    },
    {
        "label": "SECRET",
        "kind": 5,
        "importPath": "consts",
        "description": "consts",
        "peekOfCode": "SECRET = \"787a28958d7d9ce9e189527b2b4d8a4b608c8474d6447a23c3c88d9ff81c1269\"\nBASE_URL = \"https://testnet.binancefuture.com\"\nSTREAM_URL = \"wss://stream.binancefuture.com\"",
        "detail": "consts",
        "documentation": {}
    },
    {
        "label": "BASE_URL",
        "kind": 5,
        "importPath": "consts",
        "description": "consts",
        "peekOfCode": "BASE_URL = \"https://testnet.binancefuture.com\"\nSTREAM_URL = \"wss://stream.binancefuture.com\"",
        "detail": "consts",
        "documentation": {}
    },
    {
        "label": "STREAM_URL",
        "kind": 5,
        "importPath": "consts",
        "description": "consts",
        "peekOfCode": "STREAM_URL = \"wss://stream.binancefuture.com\"",
        "detail": "consts",
        "documentation": {}
    },
    {
        "label": "Order",
        "kind": 6,
        "importPath": "data",
        "description": "data",
        "peekOfCode": "class Order:\n    symbol: TickerSymbol\n    side: Side\n    quantity: float\n    positionSide: PositionSide\n    price: float\n    type: OrderType = OrderType.LIMIT\n    timeInForce: TIF = TIF.GTC\n    priceMatch: PriceMatch = PriceMatchNone.NONE",
        "detail": "data",
        "documentation": {}
    },
    {
        "label": "AutoName",
        "kind": 6,
        "importPath": "enums",
        "description": "enums",
        "peekOfCode": "class AutoName(Enum):\n    # noinspection PyMethodParameters\n    def _generate_next_value_(name, start, count, last_values):\n        # sourcery skip: instance-method-first-arg-name\n        return name\nclass PriceMatch(Enum):\n    # noinspection PyMethodParameters\n    def _generate_next_value_(name, start, count, last_values):\n        # sourcery skip: instance-method-first-arg-name\n        return name",
        "detail": "enums",
        "documentation": {}
    },
    {
        "label": "PriceMatch",
        "kind": 6,
        "importPath": "enums",
        "description": "enums",
        "peekOfCode": "class PriceMatch(Enum):\n    # noinspection PyMethodParameters\n    def _generate_next_value_(name, start, count, last_values):\n        # sourcery skip: instance-method-first-arg-name\n        return name\nclass PriceMatchNone(PriceMatch):\n    NONE = auto()\nclass PriceMatchOpponent(PriceMatch):\n    OPPONENT = auto()\n    OPPONENT_5 = auto()",
        "detail": "enums",
        "documentation": {}
    },
    {
        "label": "PriceMatchNone",
        "kind": 6,
        "importPath": "enums",
        "description": "enums",
        "peekOfCode": "class PriceMatchNone(PriceMatch):\n    NONE = auto()\nclass PriceMatchOpponent(PriceMatch):\n    OPPONENT = auto()\n    OPPONENT_5 = auto()\n    OPPONENT_10 = auto()\n    OPPONENT_20 = auto()\nclass PriceMatchQueue(PriceMatch):\n    QUEUE = auto()\n    QUEUE_5 = auto()",
        "detail": "enums",
        "documentation": {}
    },
    {
        "label": "PriceMatchOpponent",
        "kind": 6,
        "importPath": "enums",
        "description": "enums",
        "peekOfCode": "class PriceMatchOpponent(PriceMatch):\n    OPPONENT = auto()\n    OPPONENT_5 = auto()\n    OPPONENT_10 = auto()\n    OPPONENT_20 = auto()\nclass PriceMatchQueue(PriceMatch):\n    QUEUE = auto()\n    QUEUE_5 = auto()\n    QUEUE_10 = auto()\n    QUEUE_20 = auto()",
        "detail": "enums",
        "documentation": {}
    },
    {
        "label": "PriceMatchQueue",
        "kind": 6,
        "importPath": "enums",
        "description": "enums",
        "peekOfCode": "class PriceMatchQueue(PriceMatch):\n    QUEUE = auto()\n    QUEUE_5 = auto()\n    QUEUE_10 = auto()\n    QUEUE_20 = auto()\nclass TickerSymbol(AutoName):\n    BTCUSDT = auto()\nclass Side(AutoName):\n    BUY = auto()\n    SELL = auto()",
        "detail": "enums",
        "documentation": {}
    },
    {
        "label": "TickerSymbol",
        "kind": 6,
        "importPath": "enums",
        "description": "enums",
        "peekOfCode": "class TickerSymbol(AutoName):\n    BTCUSDT = auto()\nclass Side(AutoName):\n    BUY = auto()\n    SELL = auto()\nclass PositionSide(AutoName):\n    BOTH = auto()\n    LONG = auto()\n    SHORT = auto()\nclass Strategy(Enum):",
        "detail": "enums",
        "documentation": {}
    },
    {
        "label": "Side",
        "kind": 6,
        "importPath": "enums",
        "description": "enums",
        "peekOfCode": "class Side(AutoName):\n    BUY = auto()\n    SELL = auto()\nclass PositionSide(AutoName):\n    BOTH = auto()\n    LONG = auto()\n    SHORT = auto()\nclass Strategy(Enum):\n    FIXED_RANGE = auto()\n    PRICE_MATCH_QUEUE = auto()",
        "detail": "enums",
        "documentation": {}
    },
    {
        "label": "PositionSide",
        "kind": 6,
        "importPath": "enums",
        "description": "enums",
        "peekOfCode": "class PositionSide(AutoName):\n    BOTH = auto()\n    LONG = auto()\n    SHORT = auto()\nclass Strategy(Enum):\n    FIXED_RANGE = auto()\n    PRICE_MATCH_QUEUE = auto()\nclass OrderType(AutoName):\n    LIMIT = auto()\n    MARKET = auto()",
        "detail": "enums",
        "documentation": {}
    },
    {
        "label": "Strategy",
        "kind": 6,
        "importPath": "enums",
        "description": "enums",
        "peekOfCode": "class Strategy(Enum):\n    FIXED_RANGE = auto()\n    PRICE_MATCH_QUEUE = auto()\nclass OrderType(AutoName):\n    LIMIT = auto()\n    MARKET = auto()\n    STOP = auto()\n    STOP_MARKET = auto()\n    TAKE_PROFIT = auto()\n    TAKE_PROFIT_MARKET = auto()",
        "detail": "enums",
        "documentation": {}
    },
    {
        "label": "OrderType",
        "kind": 6,
        "importPath": "enums",
        "description": "enums",
        "peekOfCode": "class OrderType(AutoName):\n    LIMIT = auto()\n    MARKET = auto()\n    STOP = auto()\n    STOP_MARKET = auto()\n    TAKE_PROFIT = auto()\n    TAKE_PROFIT_MARKET = auto()\n    TRAILING_STOP_MARKET = auto()\nclass TIF(AutoName):\n    GTC = auto()",
        "detail": "enums",
        "documentation": {}
    },
    {
        "label": "TIF",
        "kind": 6,
        "importPath": "enums",
        "description": "enums",
        "peekOfCode": "class TIF(AutoName):\n    GTC = auto()\n    IOC = auto()\n    FOK = auto()\n    GTX = auto()\n    GTD = auto()\nclass AmountSpacing(Enum):\n    LINEAR = auto()\n    GEOMETRIC = auto()\nALL_ENUMS = [",
        "detail": "enums",
        "documentation": {}
    },
    {
        "label": "AmountSpacing",
        "kind": 6,
        "importPath": "enums",
        "description": "enums",
        "peekOfCode": "class AmountSpacing(Enum):\n    LINEAR = auto()\n    GEOMETRIC = auto()\nALL_ENUMS = [\n    PriceMatch,\n    PriceMatchNone,\n    PriceMatchOpponent,\n    PriceMatchQueue,\n    TickerSymbol,\n    Side,",
        "detail": "enums",
        "documentation": {}
    },
    {
        "label": "ALL_ENUMS",
        "kind": 5,
        "importPath": "enums",
        "description": "enums",
        "peekOfCode": "ALL_ENUMS = [\n    PriceMatch,\n    PriceMatchNone,\n    PriceMatchOpponent,\n    PriceMatchQueue,\n    TickerSymbol,\n    Side,\n    PositionSide,\n    Strategy,\n    OrderType,",
        "detail": "enums",
        "documentation": {}
    },
    {
        "label": "Singleton",
        "kind": 6,
        "importPath": "helpers",
        "description": "helpers",
        "peekOfCode": "class Singleton(type):\n    _instances = {}\n    def __call__(cls, *args, **kwargs):\n        if cls not in cls._instances:\n            cls._instances[cls] = super(Singleton, cls).__call__(*args, **kwargs)\n        return cls._instances[cls]",
        "detail": "helpers",
        "documentation": {}
    },
    {
        "label": "generate_table",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def generate_table(message: str) -> Table:\n    data = json.loads(message) if message else {}\n    \"\"\"Make a new table.\"\"\"\n    table = Table()\n    table.add_column(\"ID\")\n    table.add_column(\"Value\")\n    table.add_column(\"Status\")\n    mark_price = data[\"a\"][\"P\"][0][\"pa\"] if message else \"\"\n    entry_price = data[\"a\"][\"P\"][0][\"ep\"] if message else \"\"\n    break_even_price = data[\"a\"][\"P\"][0][\"bep\"] if message else \"\"",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "message_handler",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def message_handler(_, message) -> None:\n    data = json.loads(message)\n    if \"e\" in data and data[\"e\"] == \"ACCOUNT_UPDATE\":\n        live.update(renderable=generate_table(message=message), refresh=True)\ndef main() -> None:\n    repo = TradeRepo()\n    (\n        once,\n        delay_seconds,\n        symbol,",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def main() -> None:\n    repo = TradeRepo()\n    (\n        once,\n        delay_seconds,\n        symbol,\n        strategy,\n        position_side,\n        buy_orders_num,\n        sell_orders_num,",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "FORMAT",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "FORMAT = \"%(message)s\"\nlogging.basicConfig(\n    level=logging.ERROR,\n    format=FORMAT,\n    datefmt=\"[%X]\",\n    handlers=[RichHandler(markup=True)],\n)\nconfig_logging(logging, logging.ERROR)\ndef generate_table(message: str) -> Table:\n    data = json.loads(message) if message else {}",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "live",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "live = Live(generate_table(\"\"), auto_refresh=False)\nlive.start()\ndef message_handler(_, message) -> None:\n    data = json.loads(message)\n    if \"e\" in data and data[\"e\"] == \"ACCOUNT_UPDATE\":\n        live.update(renderable=generate_table(message=message), refresh=True)\ndef main() -> None:\n    repo = TradeRepo()\n    (\n        once,",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "BinanceNetworkClient",
        "kind": 6,
        "importPath": "network",
        "description": "network",
        "peekOfCode": "class BinanceNetworkClient(metaclass=Singleton):\n    def __init__(self, client: UMFutures):\n        self.client = client\n    def log_client_error(self, error: ClientError) -> None:\n        logging.error(\n            f\"{error.status_code=}, {error.error_code=}, {error.error_message=}\"\n        )\n    def cancel_all_orders_request(\n        self, symbol, receive_window: int = 4000\n    ) -> Any | dict[Any, Any]:",
        "detail": "network",
        "documentation": {}
    },
    {
        "label": "TradeRepo",
        "kind": 6,
        "importPath": "repo",
        "description": "repo",
        "peekOfCode": "class TradeRepo(metaclass=Singleton):\n    def __init__(self):\n        um_client = UMFutures(key=KEY, secret=SECRET, base_url=BASE_URL)\n        adapter = HTTPAdapter(pool_connections=200, pool_maxsize=200)\n        um_client.session.mount(\"https://\", adapter)\n        self.client = BinanceNetworkClient(client=um_client)\n    def get_hedge_position_amount(self, symbol: TickerSymbol) -> float:\n        return float(\n            self.client.get_position_risk_request(symbol=symbol.name)[0][\"positionAmt\"]\n        )",
        "detail": "repo",
        "documentation": {}
    },
    {
        "label": "generate_table",
        "kind": 2,
        "importPath": "scratch",
        "description": "scratch",
        "peekOfCode": "def generate_table() -> Table:\n    \"\"\"Make a new table.\"\"\"\n    table = Table()\n    table.add_column(\"ID\")\n    table.add_column(\"Value\")\n    table.add_column(\"Status\")\n    for row in range(random.randint(2, 6)):\n        value = random.random() * 100\n        table.add_row(\n            f\"{row}\", f\"{value:3.2f}\", \"[red]ERROR\" if value < 50 else \"[green]SUCCESS\"",
        "detail": "scratch",
        "documentation": {}
    },
    {
        "label": "trade_fixed_range",
        "kind": 2,
        "importPath": "strategy",
        "description": "strategy",
        "peekOfCode": "def trade_fixed_range(\n    symbol: TickerSymbol,\n    position_side: PositionSide,\n    center_price: float,\n    available_balance: float,\n    sell_amount: float,\n    leverage: int,\n    buy_orders_num: int = 100,\n    sell_orders_num: int = 100,\n    tif: TIF = TIF.GTC,",
        "detail": "strategy",
        "documentation": {}
    },
    {
        "label": "trade_all_price_match_queue",
        "kind": 2,
        "importPath": "strategy",
        "description": "strategy",
        "peekOfCode": "def trade_all_price_match_queue(\n    symbol: TickerSymbol,\n    position_side: PositionSide,\n    sell_amount: float,\n    leverage: int,\n    available_balance: float,\n    mark_price: float,\n    buy_orders_num: int = 4,\n    sell_orders_num: int = 4,\n    tif: TIF = TIF.GTC,",
        "detail": "strategy",
        "documentation": {}
    },
    {
        "label": "Trade",
        "kind": 6,
        "importPath": "trade",
        "description": "trade",
        "peekOfCode": "class Trade:\n    def __init__(self, repo: TradeRepo):\n        self.repo = repo\n    def work(self, order) -> Any | dict[Any, Any]:\n        if isinstance(order, list):\n            return self.repo.new_batch_order(orders=order)\n        if \"priceMatch\" in order:\n            return self.repo.new_order(\n                symbol=order[\"symbol\"],\n                side=order[\"side\"],",
        "detail": "trade",
        "documentation": {}
    },
    {
        "label": "create_order",
        "kind": 2,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "def create_order(\n    symbol: TickerSymbol,\n    side: Side,\n    quantity: float,\n    position_side: PositionSide,\n    price: float = 0.0,\n    order_type: OrderType = OrderType.LIMIT,\n    time_in_force: TIF = TIF.GTC,\n    price_match: PriceMatch = PriceMatchNone.NONE,\n) -> dict[str, Any]:",
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "create_all_queue_price_match_orders",
        "kind": 2,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "def create_all_queue_price_match_orders(\n    symbol: TickerSymbol, side: Side, position_side: PositionSide, quantity: float\n) -> list[Any]:\n    return [\n        create_order(\n            symbol=symbol,\n            side=side,\n            quantity=quantity,\n            position_side=position_side,\n            price_match=member,",
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "create_multiple_orders",
        "kind": 2,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "def create_multiple_orders(\n    symbol: TickerSymbol,\n    side: Side,\n    quantities_and_prices: list[tuple[float, float]],\n    position_side: PositionSide,\n    order_type: OrderType = OrderType.LIMIT,\n    time_in_force: TIF = TIF.GTC,\n    price_match: PriceMatch = PriceMatchNone.NONE,\n) -> list[Any]:\n    result = []",
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "get_orders_quantities_and_prices",
        "kind": 2,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "def get_orders_quantities_and_prices(\n    orders_num: int,\n    high_price: float,\n    low_price: float,\n    amount: float,\n    order_quantity_min: float = -1.0,\n    amount_spacing: AmountSpacing = AmountSpacing.LINEAR,\n) -> list[Any]:\n    quantities_and_prices = []\n    if amount > 0.0 and orders_num > 0:",
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "print_date_and_time",
        "kind": 2,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "def print_date_and_time() -> None:\n    print(f\"date and time = {datetime.datetime.now().strftime('%d/%m/%Y %H:%M:%S')}\")\ndef get_scaled(volume_scale: float, num: int) -> tuple[list[float], float]:\n    scaled: list[float] = [1]\n    scaled.extend(scaled[-1] * volume_scale for _ in range(num - 1))\n    sum_scaled: float = float(sum(scaled))\n    return scaled, sum_scaled\ndef get_scaled_mults(scaled: list[float], sum_scaled: float) -> list[float]:\n    return list(map(lambda x: x / sum_scaled, scaled))\ndef make_it_smaller(",
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "get_scaled",
        "kind": 2,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "def get_scaled(volume_scale: float, num: int) -> tuple[list[float], float]:\n    scaled: list[float] = [1]\n    scaled.extend(scaled[-1] * volume_scale for _ in range(num - 1))\n    sum_scaled: float = float(sum(scaled))\n    return scaled, sum_scaled\ndef get_scaled_mults(scaled: list[float], sum_scaled: float) -> list[float]:\n    return list(map(lambda x: x / sum_scaled, scaled))\ndef make_it_smaller(\n    total_amount: float, final_scaled: list[float]\n) -> Any | list[float]:",
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "get_scaled_mults",
        "kind": 2,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "def get_scaled_mults(scaled: list[float], sum_scaled: float) -> list[float]:\n    return list(map(lambda x: x / sum_scaled, scaled))\ndef make_it_smaller(\n    total_amount: float, final_scaled: list[float]\n) -> Any | list[float]:\n    sum_final_scaled = sum(final_scaled)\n    final_scaled[-1] -= sum_final_scaled - total_amount\n    if sum_final_scaled > total_amount:\n        final_scaled = make_it_smaller(\n            total_amount=total_amount, final_scaled=final_scaled",
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "make_it_smaller",
        "kind": 2,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "def make_it_smaller(\n    total_amount: float, final_scaled: list[float]\n) -> Any | list[float]:\n    sum_final_scaled = sum(final_scaled)\n    final_scaled[-1] -= sum_final_scaled - total_amount\n    if sum_final_scaled > total_amount:\n        final_scaled = make_it_smaller(\n            total_amount=total_amount, final_scaled=final_scaled\n        )\n    return final_scaled",
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "get_scaled_amounts",
        "kind": 2,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "def get_scaled_amounts(\n    total_amount: float, volume_scale: float, num: int\n) -> list[float]:\n    scaled, sum_scaled = get_scaled(volume_scale=volume_scale, num=num)\n    scaled_mults = get_scaled_mults(scaled=scaled, sum_scaled=sum_scaled)\n    return make_it_smaller(\n        total_amount=total_amount,\n        final_scaled=list(map(lambda x: x * total_amount, scaled_mults)),\n    )\ndef batched(iterable, n):",
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "batched",
        "kind": 2,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "def batched(iterable, n):\n    if n < 1:\n        raise ValueError(\"n must be at least one\")\n    it = iter(iterable)\n    while batch := tuple(islice(it, n)):\n        yield batch\ndef batched_lists(iterable, n) -> list[list[Any]]:\n    b = batched(iterable=iterable, n=n)\n    return [list(i) for i in b]\ndef check_grid_maxs_and_mins(",
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "batched_lists",
        "kind": 2,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "def batched_lists(iterable, n) -> list[list[Any]]:\n    b = batched(iterable=iterable, n=n)\n    return [list(i) for i in b]\ndef check_grid_maxs_and_mins(\n    price_sell_max, price_sell_min, price_buy_max, price_buy_min\n) -> None:\n    if price_sell_min >= price_sell_max:\n        raise ValueError(\"price_sell_min >= price_sell_max\")\n    if price_buy_max >= price_sell_min:\n        raise ValueError(\"price_buy_max >= price_sell_min\")",
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "check_grid_maxs_and_mins",
        "kind": 2,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "def check_grid_maxs_and_mins(\n    price_sell_max, price_sell_min, price_buy_max, price_buy_min\n) -> None:\n    if price_sell_min >= price_sell_max:\n        raise ValueError(\"price_sell_min >= price_sell_max\")\n    if price_buy_max >= price_sell_min:\n        raise ValueError(\"price_buy_max >= price_sell_min\")\n    if price_buy_min >= price_buy_max:\n        raise ValueError(\"price_buy_min >= price_buy_max\")\ndef get_grid_maxs_and_mins(",
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "get_grid_maxs_and_mins",
        "kind": 2,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "def get_grid_maxs_and_mins(\n    center_price: float,\n    price_sell_max_mult: float,\n    price_sell_min_mult: float,\n    price_buy_max_mult: float,\n    price_buy_min_mult: float,\n) -> tuple[float, float, float, float]:\n    price_sell_max = center_price * price_sell_max_mult\n    price_sell_min = center_price * price_sell_min_mult\n    price_buy_max = center_price * price_buy_max_mult",
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "get_max_buy_amount",
        "kind": 2,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "def get_max_buy_amount(leverage: int, available_balance: float, mark_price):\n    return (leverage * available_balance) / mark_price\ndef get_enum_class_name(enum_class: EnumType) -> str:\n    start = \"'\"\n    end = \"'\"\n    enum_class_str = str(enum_class)\n    return enum_class_str[\n        enum_class_str.find(start) + len(start) : enum_class_str.rfind(end)\n    ]\ndef check_file_inputs(",
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "get_enum_class_name",
        "kind": 2,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "def get_enum_class_name(enum_class: EnumType) -> str:\n    start = \"'\"\n    end = \"'\"\n    enum_class_str = str(enum_class)\n    return enum_class_str[\n        enum_class_str.find(start) + len(start) : enum_class_str.rfind(end)\n    ]\ndef check_file_inputs(\n    once: bool,\n    delay_seconds: float,",
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "check_file_inputs",
        "kind": 2,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "def check_file_inputs(\n    once: bool,\n    delay_seconds: float,\n    symbol: Any,\n    strategy: Any,\n    position_side: Any,\n    buy_orders_num: int,\n    sell_orders_num: int,\n    tif: Any,\n) -> tuple[bool, float, TickerSymbol, Strategy, PositionSide, int, int, TIF]:",
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "get_enum_type_from_member_name",
        "kind": 2,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "def get_enum_type_from_member_name(key_str: str):\n    split_string = key_str.split(\".\")\n    for i in ALL_ENUMS:\n        if split_string[0] == get_enum_class_name(i):\n            return i\ndef get_enum_member_from_name(name_str: str):\n    enum_type = get_enum_type_from_member_name(name_str)\n    if enum_type is not None:\n        for _, member in enum_type.__members__.items():\n            if name_str == f\"{member}\":",
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "get_enum_member_from_name",
        "kind": 2,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "def get_enum_member_from_name(name_str: str):\n    enum_type = get_enum_type_from_member_name(name_str)\n    if enum_type is not None:\n        for _, member in enum_type.__members__.items():\n            if name_str == f\"{member}\":\n                return member\n        raise ValueError(f\"{name_str} is not a member of {enum_type.__name__}\")\ndef get_inputs_from_file(\n    file_name: str = \"my_trading.json\",\n) -> tuple[bool, float, TickerSymbol, Strategy, PositionSide, int, int, TIF]:",
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "get_inputs_from_file",
        "kind": 2,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "def get_inputs_from_file(\n    file_name: str = \"my_trading.json\",\n) -> tuple[bool, float, TickerSymbol, Strategy, PositionSide, int, int, TIF]:\n    f = open(file_name, \"r\")\n    read = f.read()\n    data = json.loads(read)\n    return check_file_inputs(\n        once=data[\"once\"],\n        delay_seconds=data[\"delay_seconds\"],\n        symbol=get_enum_member_from_name(data[\"symbol\"]),",
        "detail": "utils",
        "documentation": {}
    }
]